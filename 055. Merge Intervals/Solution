/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
                if (intervals == null || intervals.size()<=1)
            return  intervals;

        //对整个集合按照 start 进行排序，升序
        Collections.sort(intervals,new IntervalComparator() );

        List<Interval> result = new ArrayList<>();

        Interval last = intervals.get(0);

        //下一个的头和上一个的尾进行比较，如果头小于尾，则可以合并
        for (int i=1;i<intervals.size();i++){
            Interval curt = intervals.get(i);
            if (curt.start <= last.end){
                last.end = Math.max(last.end,curt.end);
            }
            else {
                result.add(last);
                last = curt;
            }
        }
        result.add(last);
        return result;
    }
    
       private class IntervalComparator implements Comparator<Interval> {
        public int compare(Interval a,Interval b){
            return a.start - b.start;
        }
    }
}